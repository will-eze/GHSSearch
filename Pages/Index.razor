@page "/"
@inject HttpClient Http


<div class="GHSSearch">
    <div class="GHSSearch__content">
        <div class="GHSSearch__content__left">
            <p class="subheadings"><b>GHS @UserNum</b></p>
            <b class="subheadings">Title:</b>
            <p class="subheadings">@activeSongTitle</p>
        </div>
        <div class="GHSSearch__content__right">
            <b class="subheadings">Lyrics:</b>
            <p>
                @foreach (string row in activeSongLyrics)
                {
                    <p2>@row</p2>
                    <br />
                }
            </p>
        </div>
    </div>
    <div class="GHSSearch__input">
        <input type="text" @bind="@UserNum" @bind:event="oninput" placeholder="Enter GHS number..."/>
    </div>
    <textarea></textarea>
</div>
<footer>
    <div>
        Owner: William Eze (willz.eze2023@gmail.com)
    </div>
</footer>


@code {
    private int? _userNum;
    public int? UserNum
    {
        get { return _userNum; }
        set
        {
            string valueStr = value.ToString()!;

            if (valueStr.All(char.IsDigit))
            {
                int num = Convert.ToInt32(value);

                if (num > 0 && num <= songLyrics!.Length)
                {
                    _userNum = num;
                }
            }

            if (string.IsNullOrWhiteSpace(valueStr) || valueStr == string.Empty)
            {
                _userNum = null;
            }

            UpdateSong();
        }
    }

    string activeSongTitle = string.Empty;
    List<string> activeSongLyrics = new List<string>();

    public Dictionary<int, string> songTitles = new Dictionary<int, string>();
    public List<string>[]? songLyrics;

    protected override async Task OnInitializedAsync()
    {
        // this func is called before the initial render of the page --> part of the component lifecycle

        string[] csvData = (await Http.GetStringAsync("data/GHSInfo.csv")).Split('\n');

        songLyrics = new List<string>[csvData.Length];
        List<List<string>> songLyricsList = new List<List<string>>();

        for (int i = 1; i < csvData.Length; i++) // start at index 1 to avoid headers and deal with weird file naming (starts at 1, not 0)
        {
            // read the song title to songTitles Dict
            string[] row = csvData[i].Split(',');
            string songTitle = row[1];
            songTitles.Add(i, songTitle);

            // read the song lyrics to songLyrics array
            List<string> lyrics = (await Http.GetStringAsync($"data/lyrics/GHS {i}.txt")).Replace("\r", "").Split("\n").ToList();
            songLyricsList.Add(lyrics);
        }

        songLyrics = songLyricsList.ToArray();
    }
    private void UpdateSong()
    {
        activeSongLyrics = (UserNum.HasValue) ? songLyrics![UserNum.Value - 1] : new List<string>();
        activeSongTitle = (UserNum.HasValue) ? songTitles[UserNum.Value].Replace("/", ",") : string.Empty;
    }
}